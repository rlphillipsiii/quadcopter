
imu_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00802000  00802000  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a4  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000555  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001903  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002cc71  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050f  00000000  00000000  00030919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00030e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000be3  00000000  00000000  00030eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	9a c1       	rjmp	.+820    	; 0x36a <__vector_13>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	7f c1       	rjmp	.+766    	; 0x3b8 <__vector_46>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
 11e:	00 00       	nop
 120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
 122:	00 00       	nop
 124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
 126:	00 00       	nop
 128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e9       	ldi	r30, 0x9C	; 156
 214:	f5 e0       	ldi	r31, 0x05	; 5
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ab 30       	cpi	r26, 0x0B	; 11
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	ac d1       	rcall	.+856    	; 0x590 <main>
 238:	af c1       	rjmp	.+862    	; 0x598 <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 240:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_end>
 244:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__data_end+0x1>
 248:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 24a:	83 ff       	sbrs	r24, 3
 24c:	08 c0       	rjmp	.+16     	; 0x25e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 256:	86 ef       	ldi	r24, 0xF6	; 246
 258:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 25c:	83 c0       	rjmp	.+262    	; 0x364 <twim_interrupt_handler+0x128>
 25e:	98 2f       	mov	r25, r24
 260:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 262:	31 f0       	breq	.+12     	; 0x270 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 26e:	7a c0       	rjmp	.+244    	; 0x364 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 270:	86 ff       	sbrs	r24, 6
 272:	43 c0       	rjmp	.+134    	; 0x2fa <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e2       	ldi	r29, 0x20	; 32
 278:	aa 81       	ldd	r26, Y+2	; 0x02
 27a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	14 96       	adiw	r26, 0x04	; 4
 282:	2d 91       	ld	r18, X+
 284:	3c 91       	ld	r19, X
 286:	15 97       	sbiw	r26, 0x05	; 5
 288:	82 17       	cp	r24, r18
 28a:	93 07       	cpc	r25, r19
 28c:	6c f4       	brge	.+26     	; 0x2a8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 28e:	9c 01       	movw	r18, r24
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	20 93 04 20 	sts	0x2004, r18	; 0x802004 <__data_end+0x4>
 298:	30 93 05 20 	sts	0x2005, r19	; 0x802005 <__data_end+0x5>
 29c:	a8 0f       	add	r26, r24
 29e:	b9 1f       	adc	r27, r25
 2a0:	11 96       	adiw	r26, 0x01	; 1
 2a2:	8c 91       	ld	r24, X
 2a4:	87 83       	std	Z+7, r24	; 0x07
 2a6:	5e c0       	rjmp	.+188    	; 0x364 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
 2a8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end+0x6>
 2ac:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x7>
 2b0:	18 96       	adiw	r26, 0x08	; 8
 2b2:	2d 91       	ld	r18, X+
 2b4:	3c 91       	ld	r19, X
 2b6:	19 97       	sbiw	r26, 0x09	; 9
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	c8 f4       	brcc	.+50     	; 0x2f0 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
 2be:	20 91 08 20 	lds	r18, 0x2008	; 0x802008 <__data_end+0x8>
 2c2:	22 23       	and	r18, r18
 2c4:	21 f0       	breq	.+8      	; 0x2ce <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 2c6:	86 81       	ldd	r24, Z+6	; 0x06
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	86 83       	std	Z+6, r24	; 0x06
 2cc:	4b c0       	rjmp	.+150    	; 0x364 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
 2ce:	16 96       	adiw	r26, 0x06	; 6
 2d0:	2d 91       	ld	r18, X+
 2d2:	3c 91       	ld	r19, X
 2d4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
 2d6:	ac 01       	movw	r20, r24
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	40 93 06 20 	sts	0x2006, r20	; 0x802006 <__data_end+0x6>
 2e0:	50 93 07 20 	sts	0x2007, r21	; 0x802007 <__data_end+0x7>
 2e4:	d9 01       	movw	r26, r18
 2e6:	a8 0f       	add	r26, r24
 2e8:	b9 1f       	adc	r27, r25
 2ea:	8c 91       	ld	r24, X
 2ec:	87 83       	std	Z+7, r24	; 0x07
 2ee:	3a c0       	rjmp	.+116    	; 0x364 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 2f4:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
 2f8:	35 c0       	rjmp	.+106    	; 0x364 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 2fa:	88 23       	and	r24, r24
 2fc:	84 f5       	brge	.+96     	; 0x35e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 2fe:	a0 e0       	ldi	r26, 0x00	; 0
 300:	b0 e2       	ldi	r27, 0x20	; 32
 302:	12 96       	adiw	r26, 0x02	; 2
 304:	cd 91       	ld	r28, X+
 306:	dc 91       	ld	r29, X
 308:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
 30a:	16 96       	adiw	r26, 0x06	; 6
 30c:	8d 91       	ld	r24, X+
 30e:	9c 91       	ld	r25, X
 310:	17 97       	sbiw	r26, 0x07	; 7
 312:	28 85       	ldd	r18, Y+8	; 0x08
 314:	39 85       	ldd	r19, Y+9	; 0x09
 316:	82 17       	cp	r24, r18
 318:	93 07       	cpc	r25, r19
 31a:	d8 f4       	brcc	.+54     	; 0x352 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
 31c:	6e 81       	ldd	r22, Y+6	; 0x06
 31e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
 320:	9c 01       	movw	r18, r24
 322:	2f 5f       	subi	r18, 0xFF	; 255
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <__data_end+0x6>
 32a:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <__data_end+0x7>
 32e:	47 81       	ldd	r20, Z+7	; 0x07
 330:	db 01       	movw	r26, r22
 332:	a8 0f       	add	r26, r24
 334:	b9 1f       	adc	r27, r25
 336:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 338:	88 85       	ldd	r24, Y+8	; 0x08
 33a:	99 85       	ldd	r25, Y+9	; 0x09
 33c:	28 17       	cp	r18, r24
 33e:	39 07       	cpc	r19, r25
 340:	18 f4       	brcc	.+6      	; 0x348 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	83 83       	std	Z+3, r24	; 0x03
 346:	0e c0       	rjmp	.+28     	; 0x364 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 34c:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <__data_end+0xa>
 350:	09 c0       	rjmp	.+18     	; 0x364 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 356:	89 ef       	ldi	r24, 0xF9	; 249
 358:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
 35c:	03 c0       	rjmp	.+6      	; 0x364 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 35e:	8b ef       	ldi	r24, 0xFB	; 251
 360:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <__data_end+0xa>
	}
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	0b b6       	in	r0, 0x3b	; 59
 376:	0f 92       	push	r0
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	55 df       	rcall	.-342    	; 0x23c <twim_interrupt_handler>
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	0b b6       	in	r0, 0x3b	; 59
 3c4:	0f 92       	push	r0
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	2e df       	rcall	.-420    	; 0x23c <twim_interrupt_handler>
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0b be       	out	0x3b, r0	; 59
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	fc 01       	movw	r30, r24
 40c:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 412:	c6 2f       	mov	r28, r22
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	de 01       	movw	r26, r28
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <ioport_configure_port_pin+0x1a>
 41c:	b5 95       	asr	r27
 41e:	a7 95       	ror	r26
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <ioport_configure_port_pin+0x16>
 424:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 426:	50 83       	st	Z, r21
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 42e:	28 30       	cpi	r18, 0x08	; 8
 430:	31 05       	cpc	r19, r1
 432:	89 f7       	brne	.-30     	; 0x416 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 434:	40 ff       	sbrs	r20, 0
 436:	0a c0       	rjmp	.+20     	; 0x44c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 438:	41 ff       	sbrs	r20, 1
 43a:	03 c0       	rjmp	.+6      	; 0x442 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 43c:	fc 01       	movw	r30, r24
 43e:	65 83       	std	Z+5, r22	; 0x05
 440:	02 c0       	rjmp	.+4      	; 0x446 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 442:	fc 01       	movw	r30, r24
 444:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 446:	fc 01       	movw	r30, r24
 448:	61 83       	std	Z+1, r22	; 0x01
 44a:	02 c0       	rjmp	.+4      	; 0x450 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 44c:	fc 01       	movw	r30, r24
 44e:	62 83       	std	Z+2, r22	; 0x02
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 456:	43 e0       	ldi	r20, 0x03	; 3
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	80 ee       	ldi	r24, 0xE0	; 224
 45e:	97 e0       	ldi	r25, 0x07	; 7
 460:	d2 df       	rcall	.-92     	; 0x406 <ioport_configure_port_pin>
 462:	43 e0       	ldi	r20, 0x03	; 3
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	80 ee       	ldi	r24, 0xE0	; 224
 46a:	97 e0       	ldi	r25, 0x07	; 7
 46c:	cc df       	rcall	.-104    	; 0x406 <ioport_configure_port_pin>
 46e:	43 e0       	ldi	r20, 0x03	; 3
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	60 e1       	ldi	r22, 0x10	; 16
 474:	80 e6       	ldi	r24, 0x60	; 96
 476:	96 e0       	ldi	r25, 0x06	; 6
 478:	c6 df       	rcall	.-116    	; 0x406 <ioport_configure_port_pin>
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	50 e4       	ldi	r21, 0x40	; 64
 47e:	60 e2       	ldi	r22, 0x20	; 32
 480:	80 e6       	ldi	r24, 0x60	; 96
 482:	96 e0       	ldi	r25, 0x06	; 6
 484:	c0 df       	rcall	.-128    	; 0x406 <ioport_configure_port_pin>
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	5b e1       	ldi	r21, 0x1B	; 27
 48a:	60 e2       	ldi	r22, 0x20	; 32
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	96 e0       	ldi	r25, 0x06	; 6
 490:	ba df       	rcall	.-140    	; 0x406 <ioport_configure_port_pin>
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	5b e1       	ldi	r21, 0x1B	; 27
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	80 ea       	ldi	r24, 0xA0	; 160
 49a:	96 e0       	ldi	r25, 0x06	; 6
 49c:	b4 df       	rcall	.-152    	; 0x406 <ioport_configure_port_pin>
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	5b e1       	ldi	r21, 0x1B	; 27
 4a2:	64 e0       	ldi	r22, 0x04	; 4
 4a4:	80 ea       	ldi	r24, 0xA0	; 160
 4a6:	96 e0       	ldi	r25, 0x06	; 6
 4a8:	ae df       	rcall	.-164    	; 0x406 <ioport_configure_port_pin>
 4aa:	43 e0       	ldi	r20, 0x03	; 3
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	80 e6       	ldi	r24, 0x60	; 96
 4b2:	96 e0       	ldi	r25, 0x06	; 6
 4b4:	a8 df       	rcall	.-176    	; 0x406 <ioport_configure_port_pin>
 4b6:	43 e0       	ldi	r20, 0x03	; 3
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	68 e0       	ldi	r22, 0x08	; 8
 4bc:	80 e6       	ldi	r24, 0x60	; 96
 4be:	96 e0       	ldi	r25, 0x06	; 6
 4c0:	a2 df       	rcall	.-188    	; 0x406 <ioport_configure_port_pin>
 4c2:	43 e0       	ldi	r20, 0x03	; 3
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	68 e0       	ldi	r22, 0x08	; 8
 4c8:	80 ea       	ldi	r24, 0xA0	; 160
 4ca:	96 e0       	ldi	r25, 0x06	; 6
 4cc:	9c df       	rcall	.-200    	; 0x406 <ioport_configure_port_pin>
 4ce:	43 e0       	ldi	r20, 0x03	; 3
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	80 e6       	ldi	r24, 0x60	; 96
 4d6:	96 e0       	ldi	r25, 0x06	; 6
 4d8:	96 df       	rcall	.-212    	; 0x406 <ioport_configure_port_pin>
 4da:	43 e0       	ldi	r20, 0x03	; 3
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	68 e0       	ldi	r22, 0x08	; 8
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	90 df       	rcall	.-224    	; 0x406 <ioport_configure_port_pin>
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	60 e1       	ldi	r22, 0x10	; 16
 4ec:	80 e8       	ldi	r24, 0x80	; 128
 4ee:	96 e0       	ldi	r25, 0x06	; 6
 4f0:	8a df       	rcall	.-236    	; 0x406 <ioport_configure_port_pin>
 4f2:	43 e0       	ldi	r20, 0x03	; 3
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	80 e6       	ldi	r24, 0x60	; 96
 4fa:	96 e0       	ldi	r25, 0x06	; 6
 4fc:	84 df       	rcall	.-248    	; 0x406 <ioport_configure_port_pin>
 4fe:	43 e0       	ldi	r20, 0x03	; 3
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	68 e0       	ldi	r22, 0x08	; 8
 504:	80 e6       	ldi	r24, 0x60	; 96
 506:	96 e0       	ldi	r25, 0x06	; 6
 508:	7e df       	rcall	.-260    	; 0x406 <ioport_configure_port_pin>
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	64 e0       	ldi	r22, 0x04	; 4
 510:	80 e6       	ldi	r24, 0x60	; 96
 512:	96 e0       	ldi	r25, 0x06	; 6
 514:	78 df       	rcall	.-272    	; 0x406 <ioport_configure_port_pin>
 516:	43 e0       	ldi	r20, 0x03	; 3
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	60 e1       	ldi	r22, 0x10	; 16
 51c:	80 ea       	ldi	r24, 0xA0	; 160
 51e:	96 e0       	ldi	r25, 0x06	; 6
 520:	72 df       	rcall	.-284    	; 0x406 <ioport_configure_port_pin>
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	96 e0       	ldi	r25, 0x06	; 6
 52c:	6c df       	rcall	.-296    	; 0x406 <ioport_configure_port_pin>
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	64 e0       	ldi	r22, 0x04	; 4
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	96 e0       	ldi	r25, 0x06	; 6
 538:	66 df       	rcall	.-308    	; 0x406 <ioport_configure_port_pin>
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	62 e0       	ldi	r22, 0x02	; 2
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	96 e0       	ldi	r25, 0x06	; 6
 544:	60 df       	rcall	.-320    	; 0x406 <ioport_configure_port_pin>
 546:	43 e0       	ldi	r20, 0x03	; 3
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	68 e0       	ldi	r22, 0x08	; 8
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	96 e0       	ldi	r25, 0x06	; 6
 550:	5a df       	rcall	.-332    	; 0x406 <ioport_configure_port_pin>
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	64 e0       	ldi	r22, 0x04	; 4
 558:	80 e4       	ldi	r24, 0x40	; 64
 55a:	96 e0       	ldi	r25, 0x06	; 6
 55c:	54 df       	rcall	.-344    	; 0x406 <ioport_configure_port_pin>
 55e:	43 e0       	ldi	r20, 0x03	; 3
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	68 e0       	ldi	r22, 0x08	; 8
 564:	80 e6       	ldi	r24, 0x60	; 96
 566:	96 e0       	ldi	r25, 0x06	; 6
 568:	4e df       	rcall	.-356    	; 0x406 <ioport_configure_port_pin>
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	64 e0       	ldi	r22, 0x04	; 4
 570:	80 e6       	ldi	r24, 0x60	; 96
 572:	96 e0       	ldi	r25, 0x06	; 6
 574:	48 df       	rcall	.-368    	; 0x406 <ioport_configure_port_pin>
 576:	43 e0       	ldi	r20, 0x03	; 3
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	68 e0       	ldi	r22, 0x08	; 8
 57c:	80 e8       	ldi	r24, 0x80	; 128
 57e:	96 e0       	ldi	r25, 0x06	; 6
 580:	42 df       	rcall	.-380    	; 0x406 <ioport_configure_port_pin>
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	96 e0       	ldi	r25, 0x06	; 6
 58c:	3c cf       	rjmp	.-392    	; 0x406 <ioport_configure_port_pin>
 58e:	08 95       	ret

00000590 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 590:	62 df       	rcall	.-316    	; 0x456 <board_init>

	/* Insert application code here, after the board has been initialized. */
}
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
