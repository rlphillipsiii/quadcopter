
flight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080200a  0080200a  00000758  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000889  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c8  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040d3  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b53  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027fd  00000000  00000000  000064b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00008cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001468  00000000  00000000  00008f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cd  00000000  00000000  0000a3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000f532a  00000000  00000000  0000ac91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  000fffbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c2       	rjmp	.+1240   	; 0x50e <__vector_13>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	51 c2       	rjmp	.+1186   	; 0x55c <__vector_46>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
 11e:	00 00       	nop
 120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
 122:	00 00       	nop
 124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
 126:	00 00       	nop
 128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e5       	ldi	r29, 0x5F	; 95
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea eb       	ldi	r30, 0xBA	; 186
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 30       	cpi	r26, 0x0A	; 10
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	10 e2       	ldi	r17, 0x20	; 32
 228:	aa e0       	ldi	r26, 0x0A	; 10
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a6 31       	cpi	r26, 0x16	; 22
 232:	b1 07       	cpc	r27, r17
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	31 d2       	rcall	.+1122   	; 0x69a <main>
 238:	3e c2       	rjmp	.+1148   	; 0x6b6 <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 23c:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
 23e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 240:	fc 01       	movw	r30, r24
 242:	e0 59       	subi	r30, 0x90	; 144
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	60 95       	com	r22
 248:	80 81       	ld	r24, Z
 24a:	68 23       	and	r22, r24
 24c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 24e:	2f bf       	out	0x3f, r18	; 63

	cpu_irq_restore(flags);
}
 250:	08 95       	ret

00000252 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
 258:	da 01       	movw	r26, r20
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
 25a:	fc 01       	movw	r30, r24
 25c:	70 96       	adiw	r30, 0x10	; 16
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 262:	46 2f       	mov	r20, r22
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	ca 01       	movw	r24, r20
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <ioport_configure_port_pin+0x1e>
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <ioport_configure_port_pin+0x1a>
 274:	80 fd       	sbrc	r24, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
 276:	a0 83       	st	Z, r26
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 27e:	28 30       	cpi	r18, 0x08	; 8
 280:	31 05       	cpc	r19, r1
 282:	89 f7       	brne	.-30     	; 0x266 <ioport_configure_port_pin+0x14>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 284:	a0 ff       	sbrs	r26, 0
 286:	07 c0       	rjmp	.+14     	; 0x296 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 288:	b1 ff       	sbrs	r27, 1
 28a:	02 c0       	rjmp	.+4      	; 0x290 <ioport_configure_port_pin+0x3e>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 28c:	6d 83       	std	Y+5, r22	; 0x05
 28e:	01 c0       	rjmp	.+2      	; 0x292 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 290:	6e 83       	std	Y+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 292:	69 83       	std	Y+1, r22	; 0x01
 294:	01 c0       	rjmp	.+2      	; 0x298 <ioport_configure_port_pin+0x46>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 296:	6a 83       	std	Y+2, r22	; 0x02
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 29e:	80 ee       	ldi	r24, 0xE0	; 224
 2a0:	97 e0       	ldi	r25, 0x07	; 7
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	52 e0       	ldi	r21, 0x02	; 2
 2a8:	d4 df       	rcall	.-88     	; 0x252 <ioport_configure_port_pin>
 2aa:	80 ee       	ldi	r24, 0xE0	; 224
 2ac:	97 e0       	ldi	r25, 0x07	; 7
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	52 e0       	ldi	r21, 0x02	; 2
 2b4:	ce df       	rcall	.-100    	; 0x252 <ioport_configure_port_pin>
 2b6:	80 e6       	ldi	r24, 0x60	; 96
 2b8:	96 e0       	ldi	r25, 0x06	; 6
 2ba:	60 e1       	ldi	r22, 0x10	; 16
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	52 e0       	ldi	r21, 0x02	; 2
 2c0:	c8 df       	rcall	.-112    	; 0x252 <ioport_configure_port_pin>
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	96 e0       	ldi	r25, 0x06	; 6
 2c6:	60 e2       	ldi	r22, 0x20	; 32
 2c8:	41 e4       	ldi	r20, 0x41	; 65
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	c2 df       	rcall	.-124    	; 0x252 <ioport_configure_port_pin>
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	96 e0       	ldi	r25, 0x06	; 6
 2d2:	60 e2       	ldi	r22, 0x20	; 32
 2d4:	4b e1       	ldi	r20, 0x1B	; 27
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	bc df       	rcall	.-136    	; 0x252 <ioport_configure_port_pin>
 2da:	80 e6       	ldi	r24, 0x60	; 96
 2dc:	96 e0       	ldi	r25, 0x06	; 6
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	52 e0       	ldi	r21, 0x02	; 2
 2e4:	b6 df       	rcall	.-148    	; 0x252 <ioport_configure_port_pin>
 2e6:	80 e6       	ldi	r24, 0x60	; 96
 2e8:	96 e0       	ldi	r25, 0x06	; 6
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	52 e0       	ldi	r21, 0x02	; 2
 2f0:	b0 df       	rcall	.-160    	; 0x252 <ioport_configure_port_pin>
 2f2:	80 ea       	ldi	r24, 0xA0	; 160
 2f4:	96 e0       	ldi	r25, 0x06	; 6
 2f6:	68 e0       	ldi	r22, 0x08	; 8
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	52 e0       	ldi	r21, 0x02	; 2
 2fc:	aa df       	rcall	.-172    	; 0x252 <ioport_configure_port_pin>
 2fe:	80 e6       	ldi	r24, 0x60	; 96
 300:	96 e0       	ldi	r25, 0x06	; 6
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	52 e0       	ldi	r21, 0x02	; 2
 308:	a4 df       	rcall	.-184    	; 0x252 <ioport_configure_port_pin>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	96 e0       	ldi	r25, 0x06	; 6
 30e:	68 e0       	ldi	r22, 0x08	; 8
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	52 e0       	ldi	r21, 0x02	; 2
 314:	9e df       	rcall	.-196    	; 0x252 <ioport_configure_port_pin>
 316:	80 e8       	ldi	r24, 0x80	; 128
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	60 e1       	ldi	r22, 0x10	; 16
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	98 df       	rcall	.-208    	; 0x252 <ioport_configure_port_pin>
 322:	80 e6       	ldi	r24, 0x60	; 96
 324:	96 e0       	ldi	r25, 0x06	; 6
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	52 e0       	ldi	r21, 0x02	; 2
 32c:	92 df       	rcall	.-220    	; 0x252 <ioport_configure_port_pin>
 32e:	80 e6       	ldi	r24, 0x60	; 96
 330:	96 e0       	ldi	r25, 0x06	; 6
 332:	68 e0       	ldi	r22, 0x08	; 8
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	52 e0       	ldi	r21, 0x02	; 2
 338:	8c df       	rcall	.-232    	; 0x252 <ioport_configure_port_pin>
 33a:	80 e6       	ldi	r24, 0x60	; 96
 33c:	96 e0       	ldi	r25, 0x06	; 6
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	86 df       	rcall	.-244    	; 0x252 <ioport_configure_port_pin>
 346:	80 ea       	ldi	r24, 0xA0	; 160
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	60 e1       	ldi	r22, 0x10	; 16
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	52 e0       	ldi	r21, 0x02	; 2
 350:	80 df       	rcall	.-256    	; 0x252 <ioport_configure_port_pin>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	96 e0       	ldi	r25, 0x06	; 6
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	7a df       	rcall	.-268    	; 0x252 <ioport_configure_port_pin>
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	96 e0       	ldi	r25, 0x06	; 6
 362:	64 e0       	ldi	r22, 0x04	; 4
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	74 df       	rcall	.-280    	; 0x252 <ioport_configure_port_pin>
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	96 e0       	ldi	r25, 0x06	; 6
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	6e df       	rcall	.-292    	; 0x252 <ioport_configure_port_pin>
 376:	80 e4       	ldi	r24, 0x40	; 64
 378:	96 e0       	ldi	r25, 0x06	; 6
 37a:	68 e0       	ldi	r22, 0x08	; 8
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	52 e0       	ldi	r21, 0x02	; 2
 380:	68 df       	rcall	.-304    	; 0x252 <ioport_configure_port_pin>
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	96 e0       	ldi	r25, 0x06	; 6
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	62 df       	rcall	.-316    	; 0x252 <ioport_configure_port_pin>
 38e:	80 e6       	ldi	r24, 0x60	; 96
 390:	96 e0       	ldi	r25, 0x06	; 6
 392:	68 e0       	ldi	r22, 0x08	; 8
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	52 e0       	ldi	r21, 0x02	; 2
 398:	5c df       	rcall	.-328    	; 0x252 <ioport_configure_port_pin>
 39a:	80 e6       	ldi	r24, 0x60	; 96
 39c:	96 e0       	ldi	r25, 0x06	; 6
 39e:	64 e0       	ldi	r22, 0x04	; 4
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	56 df       	rcall	.-340    	; 0x252 <ioport_configure_port_pin>
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	96 e0       	ldi	r25, 0x06	; 6
 3aa:	68 e0       	ldi	r22, 0x08	; 8
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	52 e0       	ldi	r21, 0x02	; 2
 3b0:	50 df       	rcall	.-352    	; 0x252 <ioport_configure_port_pin>
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	96 e0       	ldi	r25, 0x06	; 6
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	4a cf       	rjmp	.-364    	; 0x252 <ioport_configure_port_pin>

000003be <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 3c2:	e0 91 0a 20 	lds	r30, 0x200A
 3c6:	f0 91 0b 20 	lds	r31, 0x200B
 3ca:	44 81       	ldd	r20, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 3cc:	84 2f       	mov	r24, r20
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	43 ff       	sbrs	r20, 3
 3d2:	0b c0       	rjmp	.+22     	; 0x3ea <twim_interrupt_handler+0x2c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 3d4:	48 60       	ori	r20, 0x08	; 8
 3d6:	44 83       	std	Z+4, r20	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 3dc:	86 ef       	ldi	r24, 0xF6	; 246
 3de:	9f ef       	ldi	r25, 0xFF	; 255
 3e0:	80 93 14 20 	sts	0x2014, r24
 3e4:	90 93 15 20 	sts	0x2015, r25
 3e8:	8f c0       	rjmp	.+286    	; 0x508 <twim_interrupt_handler+0x14a>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
 3ea:	9c 01       	movw	r18, r24
 3ec:	24 71       	andi	r18, 0x14	; 20
 3ee:	30 70       	andi	r19, 0x00	; 0

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 3f0:	21 15       	cp	r18, r1
 3f2:	31 05       	cpc	r19, r1
 3f4:	49 f0       	breq	.+18     	; 0x408 <twim_interrupt_handler+0x4a>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	9f ef       	ldi	r25, 0xFF	; 255
 3fe:	80 93 14 20 	sts	0x2014, r24
 402:	90 93 15 20 	sts	0x2015, r25
 406:	80 c0       	rjmp	.+256    	; 0x508 <twim_interrupt_handler+0x14a>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 408:	46 ff       	sbrs	r20, 6
 40a:	45 c0       	rjmp	.+138    	; 0x496 <twim_interrupt_handler+0xd8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 40c:	a0 91 0c 20 	lds	r26, 0x200C
 410:	b0 91 0d 20 	lds	r27, 0x200D

	if (transfer.addr_count < pkg->addr_length) {
 414:	20 91 0e 20 	lds	r18, 0x200E
 418:	30 91 0f 20 	lds	r19, 0x200F
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	8d 91       	ld	r24, X+
 420:	9c 91       	ld	r25, X
 422:	15 97       	sbiw	r26, 0x05	; 5
 424:	28 17       	cp	r18, r24
 426:	39 07       	cpc	r19, r25
 428:	6c f4       	brge	.+26     	; 0x444 <twim_interrupt_handler+0x86>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 42a:	a2 0f       	add	r26, r18
 42c:	b3 1f       	adc	r27, r19
 42e:	11 96       	adiw	r26, 0x01	; 1
 430:	8c 91       	ld	r24, X
 432:	11 97       	sbiw	r26, 0x01	; 1
 434:	87 83       	std	Z+7, r24	; 0x07
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	20 93 0e 20 	sts	0x200E, r18
 43e:	30 93 0f 20 	sts	0x200F, r19
 442:	62 c0       	rjmp	.+196    	; 0x508 <twim_interrupt_handler+0x14a>

	} else if (transfer.data_count < pkg->length) {
 444:	20 91 10 20 	lds	r18, 0x2010
 448:	30 91 11 20 	lds	r19, 0x2011
 44c:	18 96       	adiw	r26, 0x08	; 8
 44e:	8d 91       	ld	r24, X+
 450:	9c 91       	ld	r25, X
 452:	19 97       	sbiw	r26, 0x09	; 9
 454:	28 17       	cp	r18, r24
 456:	39 07       	cpc	r19, r25
 458:	b8 f4       	brcc	.+46     	; 0x488 <twim_interrupt_handler+0xca>

		if (transfer.read) {
 45a:	80 91 12 20 	lds	r24, 0x2012
 45e:	88 23       	and	r24, r24
 460:	21 f0       	breq	.+8      	; 0x46a <twim_interrupt_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 462:	86 81       	ldd	r24, Z+6	; 0x06
 464:	81 60       	ori	r24, 0x01	; 1
 466:	86 83       	std	Z+6, r24	; 0x06
 468:	4f c0       	rjmp	.+158    	; 0x508 <twim_interrupt_handler+0x14a>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
 46a:	16 96       	adiw	r26, 0x06	; 6
 46c:	0d 90       	ld	r0, X+
 46e:	bc 91       	ld	r27, X
 470:	a0 2d       	mov	r26, r0
 472:	a2 0f       	add	r26, r18
 474:	b3 1f       	adc	r27, r19
 476:	8c 91       	ld	r24, X
 478:	87 83       	std	Z+7, r24	; 0x07
 47a:	2f 5f       	subi	r18, 0xFF	; 255
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	20 93 10 20 	sts	0x2010, r18
 482:	30 93 11 20 	sts	0x2011, r19
 486:	40 c0       	rjmp	.+128    	; 0x508 <twim_interrupt_handler+0x14a>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 48c:	10 92 14 20 	sts	0x2014, r1
 490:	10 92 15 20 	sts	0x2015, r1
 494:	39 c0       	rjmp	.+114    	; 0x508 <twim_interrupt_handler+0x14a>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 496:	44 23       	and	r20, r20
 498:	8c f5       	brge	.+98     	; 0x4fc <twim_interrupt_handler+0x13e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 49a:	c0 91 0c 20 	lds	r28, 0x200C
 49e:	d0 91 0d 20 	lds	r29, 0x200D

	if (transfer.data_count < pkg->length) {
 4a2:	20 91 10 20 	lds	r18, 0x2010
 4a6:	30 91 11 20 	lds	r19, 0x2011
 4aa:	88 85       	ldd	r24, Y+8	; 0x08
 4ac:	99 85       	ldd	r25, Y+9	; 0x09
 4ae:	28 17       	cp	r18, r24
 4b0:	39 07       	cpc	r19, r25
 4b2:	d8 f4       	brcc	.+54     	; 0x4ea <twim_interrupt_handler+0x12c>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
 4b4:	87 81       	ldd	r24, Z+7	; 0x07
 4b6:	ae 81       	ldd	r26, Y+6	; 0x06
 4b8:	bf 81       	ldd	r27, Y+7	; 0x07
 4ba:	a2 0f       	add	r26, r18
 4bc:	b3 1f       	adc	r27, r19
 4be:	8c 93       	st	X, r24
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	20 93 10 20 	sts	0x2010, r18
 4c8:	30 93 11 20 	sts	0x2011, r19

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 4cc:	88 85       	ldd	r24, Y+8	; 0x08
 4ce:	99 85       	ldd	r25, Y+9	; 0x09
 4d0:	28 17       	cp	r18, r24
 4d2:	39 07       	cpc	r19, r25
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <twim_interrupt_handler+0x11e>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	83 83       	std	Z+3, r24	; 0x03
 4da:	16 c0       	rjmp	.+44     	; 0x508 <twim_interrupt_handler+0x14a>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 4dc:	87 e0       	ldi	r24, 0x07	; 7
 4de:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 4e0:	10 92 14 20 	sts	0x2014, r1
 4e4:	10 92 15 20 	sts	0x2015, r1
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <twim_interrupt_handler+0x14a>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 4ee:	89 ef       	ldi	r24, 0xF9	; 249
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	80 93 14 20 	sts	0x2014, r24
 4f6:	90 93 15 20 	sts	0x2015, r25
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <twim_interrupt_handler+0x14a>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 4fc:	8b ef       	ldi	r24, 0xFB	; 251
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	80 93 14 20 	sts	0x2014, r24
 504:	90 93 15 20 	sts	0x2015, r25
	}
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	0b b6       	in	r0, 0x3b	; 59
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
 534:	44 df       	rcall	.-376    	; 0x3be <twim_interrupt_handler>
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0b be       	out	0x3b, r0	; 59
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <__vector_46>:
 55c:	1f 92       	push	r1
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	0b b6       	in	r0, 0x3b	; 59
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31
 582:	1d df       	rcall	.-454    	; 0x3be <twim_interrupt_handler>
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0b be       	out	0x3b, r0	; 59
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <twi_master_init>:
 5aa:	fc 01       	movw	r30, r24
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
 5ac:	db 01       	movw	r26, r22
 5ae:	14 96       	adiw	r26, 0x04	; 4
 5b0:	8c 91       	ld	r24, X
 5b2:	14 97       	sbiw	r26, 0x04	; 4
 5b4:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
 5b6:	88 eb       	ldi	r24, 0xB8	; 184
 5b8:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
 5be:	10 92 13 20 	sts	0x2013, r1
	transfer.status    = STATUS_OK;
 5c2:	10 92 14 20 	sts	0x2014, r1
 5c6:	10 92 15 20 	sts	0x2015, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
 5ca:	e0 ea       	ldi	r30, 0xA0	; 160
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	82 81       	ldd	r24, Z+2	; 0x02
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
 5d4:	78 94       	sei

	return STATUS_OK;
}
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	08 95       	ret

000005dc <imu_init>:
} XMRegister;


void imu_init()
{
	twi_init();
 5dc:	3e c0       	rjmp	.+124    	; 0x65a <twi_init>
 5de:	08 95       	ret

000005e0 <enable_throttle>:
#define TIMER_PORT PORTC

void enable_throttle()
{
	/* configures bits 0-3 of the timer port as outputs for pwm */
	TIMER_PORT.DIR |= 0x0F;
 5e0:	e0 e4       	ldi	r30, 0x40	; 64
 5e2:	f6 e0       	ldi	r31, 0x06	; 6
 5e4:	80 81       	ld	r24, Z
 5e6:	8f 60       	ori	r24, 0x0F	; 15
 5e8:	80 83       	st	Z, r24
	
	/* no clock prescaler */
	TIMER.CTRLA = TC0_CLKSEL0_bm;
 5ea:	e0 e0       	ldi	r30, 0x00	; 0
 5ec:	f8 e0       	ldi	r31, 0x08	; 8
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 83       	st	Z, r24
	
	/* enable single slope pwm mode */
	TIMER.CTRLB |= TC0_WGMODE0_bm | TC0_WGMODE1_bm;
 5f2:	81 81       	ldd	r24, Z+1	; 0x01
 5f4:	83 60       	ori	r24, 0x03	; 3
 5f6:	81 83       	std	Z+1, r24	; 0x01
	/* enable pin outputs for timer 0 A-D */
	TIMER.CTRLB |= TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
 5f8:	81 81       	ldd	r24, Z+1	; 0x01
 5fa:	80 6f       	ori	r24, 0xF0	; 240
 5fc:	81 83       	std	Z+1, r24	; 0x01
	
	/* set the top of the pwm to create a 50Hz signal */
	TIMER.PER = TICKS_PER_50Hz;
 5fe:	80 e4       	ldi	r24, 0x40	; 64
 600:	9c e9       	ldi	r25, 0x9C	; 156
 602:	86 a3       	lds	r24, 0x56
 604:	97 a3       	lds	r25, 0x57
}
 606:	08 95       	ret

00000608 <set_throttle>:

void set_throttle(ThrottleOutput output, uint16_t throttle)
{
	if (throttle > THROTTLE_MAX) {
 608:	23 e0       	ldi	r18, 0x03	; 3
 60a:	69 3e       	cpi	r22, 0xE9	; 233
 60c:	72 07       	cpc	r23, r18
 60e:	20 f5       	brcc	.+72     	; 0x658 <set_throttle+0x50>
		return;
	}
	
	uint16_t val = 2000 + throttle*2;
 610:	68 51       	subi	r22, 0x18	; 24
 612:	7c 4f       	sbci	r23, 0xFC	; 252
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
	
	switch (output) {
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	91 05       	cpc	r25, r1
 61c:	79 f0       	breq	.+30     	; 0x63c <set_throttle+0x34>
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	91 05       	cpc	r25, r1
 622:	38 f0       	brcs	.+14     	; 0x632 <set_throttle+0x2a>
 624:	82 30       	cpi	r24, 0x02	; 2
 626:	91 05       	cpc	r25, r1
 628:	71 f0       	breq	.+28     	; 0x646 <set_throttle+0x3e>
 62a:	83 30       	cpi	r24, 0x03	; 3
 62c:	91 05       	cpc	r25, r1
 62e:	a1 f4       	brne	.+40     	; 0x658 <set_throttle+0x50>
 630:	0f c0       	rjmp	.+30     	; 0x650 <set_throttle+0x48>
	case A: TIMER.CCA = val; break;
 632:	e0 e0       	ldi	r30, 0x00	; 0
 634:	f8 e0       	ldi	r31, 0x08	; 8
 636:	60 a7       	lds	r22, 0x70
 638:	71 a7       	lds	r23, 0x71
 63a:	08 95       	ret
	case B: TIMER.CCB = val; break;
 63c:	e0 e0       	ldi	r30, 0x00	; 0
 63e:	f8 e0       	ldi	r31, 0x08	; 8
 640:	62 a7       	lds	r22, 0x72
 642:	73 a7       	lds	r23, 0x73
 644:	08 95       	ret
	case C: TIMER.CCC = val; break;
 646:	e0 e0       	ldi	r30, 0x00	; 0
 648:	f8 e0       	ldi	r31, 0x08	; 8
 64a:	64 a7       	lds	r22, 0x74
 64c:	75 a7       	lds	r23, 0x75
 64e:	08 95       	ret
	case D: TIMER.CCD = val; break;
 650:	e0 e0       	ldi	r30, 0x00	; 0
 652:	f8 e0       	ldi	r31, 0x08	; 8
 654:	66 a7       	lds	r22, 0x76
 656:	77 a7       	lds	r23, 0x77
 658:	08 95       	ret

0000065a <twi_init>:
	.chip  = TWI_MASTER_ADDR
};

void twi_init()
{
	TWI_MASTER_PORT.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
 65a:	e0 e8       	ldi	r30, 0x80	; 128
 65c:	f6 e0       	ldi	r31, 0x06	; 6
 65e:	88 e3       	ldi	r24, 0x38	; 56
 660:	80 8b       	std	Z+16, r24	; 0x10
	TWI_MASTER_PORT.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;
 662:	81 8b       	std	Z+17, r24	; 0x11

	m_options.speed_reg = TWI_BAUD(sysclk_get_cpu_hz(), TWI_SPEED);
 664:	8f e0       	ldi	r24, 0x0F	; 15
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	a0 e0       	ldi	r26, 0x00	; 0
 66a:	b0 e0       	ldi	r27, 0x00	; 0
 66c:	80 93 04 20 	sts	0x2004, r24
 670:	90 93 05 20 	sts	0x2005, r25
 674:	a0 93 06 20 	sts	0x2006, r26
 678:	b0 93 07 20 	sts	0x2007, r27
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 67c:	85 e0       	ldi	r24, 0x05	; 5
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	60 e4       	ldi	r22, 0x40	; 64
 682:	dc dd       	rcall	.-1096   	; 0x23c <sysclk_enable_module>
 684:	80 ea       	ldi	r24, 0xA0	; 160
	
	sysclk_enable_peripheral_clock(&TWI_MASTER);
	twi_master_init(&TWI_MASTER, &m_options);
 686:	94 e0       	ldi	r25, 0x04	; 4
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e2       	ldi	r23, 0x20	; 32
 68c:	8e df       	rcall	.-228    	; 0x5aa <twi_master_init>
 68e:	e0 ea       	ldi	r30, 0xA0	; 160
 690:	f4 e0       	ldi	r31, 0x04	; 4
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
 692:	81 81       	ldd	r24, Z+1	; 0x01
 694:	88 60       	ori	r24, 0x08	; 8
 696:	81 83       	std	Z+1, r24	; 0x01
 698:	08 95       	ret

0000069a <main>:
	return false;
}

int main(void)
{
	board_init();
 69a:	01 de       	rcall	.-1022   	; 0x29e <board_init>
 69c:	a1 df       	rcall	.-190    	; 0x5e0 <enable_throttle>

	enable_throttle();
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
	set_throttle(A, THROTTLE_MIN);
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	b0 df       	rcall	.-160    	; 0x608 <set_throttle>
 6a8:	99 df       	rcall	.-206    	; 0x5dc <imu_init>
 6aa:	87 e0       	ldi	r24, 0x07	; 7
 6ac:	e0 ea       	ldi	r30, 0xA0	; 160

	imu_init();
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	82 83       	std	Z+2, r24	; 0x02
	
	irq_initialize_vectors();
 6b2:	78 94       	sei
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <main+0x1a>

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
