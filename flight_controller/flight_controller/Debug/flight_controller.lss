
flight_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00802000  00802000  0000071a  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000889  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000130  00000000  00000000  00001690  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dbd  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  0000357d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ac3  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00005748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b01  00000000  00000000  00005904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050d  00000000  00000000  00006405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000a975f  00000000  00000000  00006912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000b0071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c2       	rjmp	.+1218   	; 0x4f8 <__vector_13>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	46 c2       	rjmp	.+1164   	; 0x546 <__vector_46>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
 11e:	00 00       	nop
 120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
 122:	00 00       	nop
 124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
 126:	00 00       	nop
 128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e5       	ldi	r29, 0x5F	; 95
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 ea       	ldi	r30, 0xA6	; 166
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	10 e2       	ldi	r17, 0x20	; 32
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 30       	cpi	r26, 0x0E	; 14
 232:	b1 07       	cpc	r27, r17
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	08 d2       	rcall	.+1040   	; 0x648 <main>
 238:	34 c2       	rjmp	.+1128   	; 0x6a2 <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	da 01       	movw	r26, r20
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
 244:	fc 01       	movw	r30, r24
 246:	70 96       	adiw	r30, 0x10	; 16
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 24c:	46 2f       	mov	r20, r22
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	ca 01       	movw	r24, r20
 252:	02 2e       	mov	r0, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <ioport_configure_port_pin+0x1e>
 256:	95 95       	asr	r25
 258:	87 95       	ror	r24
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <ioport_configure_port_pin+0x1a>
 25e:	80 fd       	sbrc	r24, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
 260:	a0 83       	st	Z, r26
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 268:	28 30       	cpi	r18, 0x08	; 8
 26a:	31 05       	cpc	r19, r1
 26c:	89 f7       	brne	.-30     	; 0x250 <ioport_configure_port_pin+0x14>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 26e:	a0 ff       	sbrs	r26, 0
 270:	07 c0       	rjmp	.+14     	; 0x280 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 272:	b1 ff       	sbrs	r27, 1
 274:	02 c0       	rjmp	.+4      	; 0x27a <ioport_configure_port_pin+0x3e>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 276:	6d 83       	std	Y+5, r22	; 0x05
 278:	01 c0       	rjmp	.+2      	; 0x27c <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 27a:	6e 83       	std	Y+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 27c:	69 83       	std	Y+1, r22	; 0x01
 27e:	01 c0       	rjmp	.+2      	; 0x282 <ioport_configure_port_pin+0x46>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 280:	6a 83       	std	Y+2, r22	; 0x02
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 288:	80 ee       	ldi	r24, 0xE0	; 224
 28a:	97 e0       	ldi	r25, 0x07	; 7
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	52 e0       	ldi	r21, 0x02	; 2
 292:	d4 df       	rcall	.-88     	; 0x23c <ioport_configure_port_pin>
 294:	80 ee       	ldi	r24, 0xE0	; 224
 296:	97 e0       	ldi	r25, 0x07	; 7
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	52 e0       	ldi	r21, 0x02	; 2
 29e:	ce df       	rcall	.-100    	; 0x23c <ioport_configure_port_pin>
 2a0:	80 e6       	ldi	r24, 0x60	; 96
 2a2:	96 e0       	ldi	r25, 0x06	; 6
 2a4:	60 e1       	ldi	r22, 0x10	; 16
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	52 e0       	ldi	r21, 0x02	; 2
 2aa:	c8 df       	rcall	.-112    	; 0x23c <ioport_configure_port_pin>
 2ac:	80 e6       	ldi	r24, 0x60	; 96
 2ae:	96 e0       	ldi	r25, 0x06	; 6
 2b0:	60 e2       	ldi	r22, 0x20	; 32
 2b2:	41 e4       	ldi	r20, 0x41	; 65
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	c2 df       	rcall	.-124    	; 0x23c <ioport_configure_port_pin>
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	96 e0       	ldi	r25, 0x06	; 6
 2bc:	60 e2       	ldi	r22, 0x20	; 32
 2be:	4b e1       	ldi	r20, 0x1B	; 27
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	bc df       	rcall	.-136    	; 0x23c <ioport_configure_port_pin>
 2c4:	80 e6       	ldi	r24, 0x60	; 96
 2c6:	96 e0       	ldi	r25, 0x06	; 6
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	52 e0       	ldi	r21, 0x02	; 2
 2ce:	b6 df       	rcall	.-148    	; 0x23c <ioport_configure_port_pin>
 2d0:	80 e6       	ldi	r24, 0x60	; 96
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	68 e0       	ldi	r22, 0x08	; 8
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	52 e0       	ldi	r21, 0x02	; 2
 2da:	b0 df       	rcall	.-160    	; 0x23c <ioport_configure_port_pin>
 2dc:	80 ea       	ldi	r24, 0xA0	; 160
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	68 e0       	ldi	r22, 0x08	; 8
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	52 e0       	ldi	r21, 0x02	; 2
 2e6:	aa df       	rcall	.-172    	; 0x23c <ioport_configure_port_pin>
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	52 e0       	ldi	r21, 0x02	; 2
 2f2:	a4 df       	rcall	.-184    	; 0x23c <ioport_configure_port_pin>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	96 e0       	ldi	r25, 0x06	; 6
 2f8:	68 e0       	ldi	r22, 0x08	; 8
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	52 e0       	ldi	r21, 0x02	; 2
 2fe:	9e df       	rcall	.-196    	; 0x23c <ioport_configure_port_pin>
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	96 e0       	ldi	r25, 0x06	; 6
 304:	60 e1       	ldi	r22, 0x10	; 16
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	98 df       	rcall	.-208    	; 0x23c <ioport_configure_port_pin>
 30c:	80 e6       	ldi	r24, 0x60	; 96
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	52 e0       	ldi	r21, 0x02	; 2
 316:	92 df       	rcall	.-220    	; 0x23c <ioport_configure_port_pin>
 318:	80 e6       	ldi	r24, 0x60	; 96
 31a:	96 e0       	ldi	r25, 0x06	; 6
 31c:	68 e0       	ldi	r22, 0x08	; 8
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	52 e0       	ldi	r21, 0x02	; 2
 322:	8c df       	rcall	.-232    	; 0x23c <ioport_configure_port_pin>
 324:	80 e6       	ldi	r24, 0x60	; 96
 326:	96 e0       	ldi	r25, 0x06	; 6
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	86 df       	rcall	.-244    	; 0x23c <ioport_configure_port_pin>
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	96 e0       	ldi	r25, 0x06	; 6
 334:	60 e1       	ldi	r22, 0x10	; 16
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	52 e0       	ldi	r21, 0x02	; 2
 33a:	80 df       	rcall	.-256    	; 0x23c <ioport_configure_port_pin>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	96 e0       	ldi	r25, 0x06	; 6
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	7a df       	rcall	.-268    	; 0x23c <ioport_configure_port_pin>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	96 e0       	ldi	r25, 0x06	; 6
 34c:	64 e0       	ldi	r22, 0x04	; 4
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	74 df       	rcall	.-280    	; 0x23c <ioport_configure_port_pin>
 354:	80 e2       	ldi	r24, 0x20	; 32
 356:	96 e0       	ldi	r25, 0x06	; 6
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	6e df       	rcall	.-292    	; 0x23c <ioport_configure_port_pin>
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	96 e0       	ldi	r25, 0x06	; 6
 364:	68 e0       	ldi	r22, 0x08	; 8
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	52 e0       	ldi	r21, 0x02	; 2
 36a:	68 df       	rcall	.-304    	; 0x23c <ioport_configure_port_pin>
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	96 e0       	ldi	r25, 0x06	; 6
 370:	64 e0       	ldi	r22, 0x04	; 4
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	62 df       	rcall	.-316    	; 0x23c <ioport_configure_port_pin>
 378:	80 e6       	ldi	r24, 0x60	; 96
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	68 e0       	ldi	r22, 0x08	; 8
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	52 e0       	ldi	r21, 0x02	; 2
 382:	5c df       	rcall	.-328    	; 0x23c <ioport_configure_port_pin>
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	56 df       	rcall	.-340    	; 0x23c <ioport_configure_port_pin>
 390:	80 e8       	ldi	r24, 0x80	; 128
 392:	96 e0       	ldi	r25, 0x06	; 6
 394:	68 e0       	ldi	r22, 0x08	; 8
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	52 e0       	ldi	r21, 0x02	; 2
 39a:	50 df       	rcall	.-352    	; 0x23c <ioport_configure_port_pin>
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	96 e0       	ldi	r25, 0x06	; 6
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	4a cf       	rjmp	.-364    	; 0x23c <ioport_configure_port_pin>

000003a8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
 3ac:	e0 91 00 20 	lds	r30, 0x2000
 3b0:	f0 91 01 20 	lds	r31, 0x2001
 3b4:	44 81       	ldd	r20, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
 3b6:	84 2f       	mov	r24, r20
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	43 ff       	sbrs	r20, 3
 3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <twim_interrupt_handler+0x2c>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
 3be:	48 60       	ori	r20, 0x08	; 8
 3c0:	44 83       	std	Z+4, r20	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
 3c6:	86 ef       	ldi	r24, 0xF6	; 246
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	80 93 0a 20 	sts	0x200A, r24
 3ce:	90 93 0b 20 	sts	0x200B, r25
 3d2:	8f c0       	rjmp	.+286    	; 0x4f2 <twim_interrupt_handler+0x14a>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
 3d4:	9c 01       	movw	r18, r24
 3d6:	24 71       	andi	r18, 0x14	; 20
 3d8:	30 70       	andi	r19, 0x00	; 0

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	49 f0       	breq	.+18     	; 0x3f2 <twim_interrupt_handler+0x4a>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	80 93 0a 20 	sts	0x200A, r24
 3ec:	90 93 0b 20 	sts	0x200B, r25
 3f0:	80 c0       	rjmp	.+256    	; 0x4f2 <twim_interrupt_handler+0x14a>

	} else if (master_status & TWI_MASTER_WIF_bm) {
 3f2:	46 ff       	sbrs	r20, 6
 3f4:	45 c0       	rjmp	.+138    	; 0x480 <twim_interrupt_handler+0xd8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 3f6:	a0 91 02 20 	lds	r26, 0x2002
 3fa:	b0 91 03 20 	lds	r27, 0x2003

	if (transfer.addr_count < pkg->addr_length) {
 3fe:	20 91 04 20 	lds	r18, 0x2004
 402:	30 91 05 20 	lds	r19, 0x2005
 406:	14 96       	adiw	r26, 0x04	; 4
 408:	8d 91       	ld	r24, X+
 40a:	9c 91       	ld	r25, X
 40c:	15 97       	sbiw	r26, 0x05	; 5
 40e:	28 17       	cp	r18, r24
 410:	39 07       	cpc	r19, r25
 412:	6c f4       	brge	.+26     	; 0x42e <twim_interrupt_handler+0x86>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
 414:	a2 0f       	add	r26, r18
 416:	b3 1f       	adc	r27, r19
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	8c 91       	ld	r24, X
 41c:	11 97       	sbiw	r26, 0x01	; 1
 41e:	87 83       	std	Z+7, r24	; 0x07
 420:	2f 5f       	subi	r18, 0xFF	; 255
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	20 93 04 20 	sts	0x2004, r18
 428:	30 93 05 20 	sts	0x2005, r19
 42c:	62 c0       	rjmp	.+196    	; 0x4f2 <twim_interrupt_handler+0x14a>

	} else if (transfer.data_count < pkg->length) {
 42e:	20 91 06 20 	lds	r18, 0x2006
 432:	30 91 07 20 	lds	r19, 0x2007
 436:	18 96       	adiw	r26, 0x08	; 8
 438:	8d 91       	ld	r24, X+
 43a:	9c 91       	ld	r25, X
 43c:	19 97       	sbiw	r26, 0x09	; 9
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	b8 f4       	brcc	.+46     	; 0x472 <twim_interrupt_handler+0xca>

		if (transfer.read) {
 444:	80 91 08 20 	lds	r24, 0x2008
 448:	88 23       	and	r24, r24
 44a:	21 f0       	breq	.+8      	; 0x454 <twim_interrupt_handler+0xac>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
 44c:	86 81       	ldd	r24, Z+6	; 0x06
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	86 83       	std	Z+6, r24	; 0x06
 452:	4f c0       	rjmp	.+158    	; 0x4f2 <twim_interrupt_handler+0x14a>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
 454:	16 96       	adiw	r26, 0x06	; 6
 456:	0d 90       	ld	r0, X+
 458:	bc 91       	ld	r27, X
 45a:	a0 2d       	mov	r26, r0
 45c:	a2 0f       	add	r26, r18
 45e:	b3 1f       	adc	r27, r19
 460:	8c 91       	ld	r24, X
 462:	87 83       	std	Z+7, r24	; 0x07
 464:	2f 5f       	subi	r18, 0xFF	; 255
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	20 93 06 20 	sts	0x2006, r18
 46c:	30 93 07 20 	sts	0x2007, r19
 470:	40 c0       	rjmp	.+128    	; 0x4f2 <twim_interrupt_handler+0x14a>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
 476:	10 92 0a 20 	sts	0x200A, r1
 47a:	10 92 0b 20 	sts	0x200B, r1
 47e:	39 c0       	rjmp	.+114    	; 0x4f2 <twim_interrupt_handler+0x14a>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
 480:	44 23       	and	r20, r20
 482:	8c f5       	brge	.+98     	; 0x4e6 <twim_interrupt_handler+0x13e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
 484:	c0 91 02 20 	lds	r28, 0x2002
 488:	d0 91 03 20 	lds	r29, 0x2003

	if (transfer.data_count < pkg->length) {
 48c:	20 91 06 20 	lds	r18, 0x2006
 490:	30 91 07 20 	lds	r19, 0x2007
 494:	88 85       	ldd	r24, Y+8	; 0x08
 496:	99 85       	ldd	r25, Y+9	; 0x09
 498:	28 17       	cp	r18, r24
 49a:	39 07       	cpc	r19, r25
 49c:	d8 f4       	brcc	.+54     	; 0x4d4 <twim_interrupt_handler+0x12c>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
 49e:	87 81       	ldd	r24, Z+7	; 0x07
 4a0:	ae 81       	ldd	r26, Y+6	; 0x06
 4a2:	bf 81       	ldd	r27, Y+7	; 0x07
 4a4:	a2 0f       	add	r26, r18
 4a6:	b3 1f       	adc	r27, r19
 4a8:	8c 93       	st	X, r24
 4aa:	2f 5f       	subi	r18, 0xFF	; 255
 4ac:	3f 4f       	sbci	r19, 0xFF	; 255
 4ae:	20 93 06 20 	sts	0x2006, r18
 4b2:	30 93 07 20 	sts	0x2007, r19

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
 4b6:	88 85       	ldd	r24, Y+8	; 0x08
 4b8:	99 85       	ldd	r25, Y+9	; 0x09
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <twim_interrupt_handler+0x11e>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	83 83       	std	Z+3, r24	; 0x03
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <twim_interrupt_handler+0x14a>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
 4ca:	10 92 0a 20 	sts	0x200A, r1
 4ce:	10 92 0b 20 	sts	0x200B, r1
 4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <twim_interrupt_handler+0x14a>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
 4d8:	89 ef       	ldi	r24, 0xF9	; 249
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	80 93 0a 20 	sts	0x200A, r24
 4e0:	90 93 0b 20 	sts	0x200B, r25
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <twim_interrupt_handler+0x14a>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
 4e6:	8b ef       	ldi	r24, 0xFB	; 251
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	80 93 0a 20 	sts	0x200A, r24
 4ee:	90 93 0b 20 	sts	0x200B, r25
	}
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	0b b6       	in	r0, 0x3b	; 59
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	2f 93       	push	r18
 508:	3f 93       	push	r19
 50a:	4f 93       	push	r20
 50c:	5f 93       	push	r21
 50e:	6f 93       	push	r22
 510:	7f 93       	push	r23
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	af 93       	push	r26
 518:	bf 93       	push	r27
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
 51e:	44 df       	rcall	.-376    	; 0x3a8 <twim_interrupt_handler>
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0b be       	out	0x3b, r0	; 59
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__vector_46>:
 546:	1f 92       	push	r1
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	0b b6       	in	r0, 0x3b	; 59
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	1d df       	rcall	.-454    	; 0x3a8 <twim_interrupt_handler>
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0b be       	out	0x3b, r0	; 59
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <enable_throttle>:
#define TIMER_PORT PORTC

void enable_throttle()
{
	/* configures bits 0-3 of the timer port as outputs for pwm */
	TIMER_PORT.DIR |= 0x0F;
 594:	e0 e4       	ldi	r30, 0x40	; 64
 596:	f6 e0       	ldi	r31, 0x06	; 6
 598:	80 81       	ld	r24, Z
 59a:	8f 60       	ori	r24, 0x0F	; 15
 59c:	80 83       	st	Z, r24
	
	/* no clock prescaler */
	TIMER.CTRLA = TC0_CLKSEL0_bm;
 59e:	e0 e0       	ldi	r30, 0x00	; 0
 5a0:	f8 e0       	ldi	r31, 0x08	; 8
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 83       	st	Z, r24
	
	/* enable single slope pwm mode */
	TIMER.CTRLB |= TC0_WGMODE0_bm | TC0_WGMODE1_bm;
 5a6:	81 81       	ldd	r24, Z+1	; 0x01
 5a8:	83 60       	ori	r24, 0x03	; 3
 5aa:	81 83       	std	Z+1, r24	; 0x01
	/* enable pin outputs for timer 0 A-D */
	TIMER.CTRLB |= TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm;
 5ac:	81 81       	ldd	r24, Z+1	; 0x01
 5ae:	80 6f       	ori	r24, 0xF0	; 240
 5b0:	81 83       	std	Z+1, r24	; 0x01
	
	/* set the top of the pwm to create a 50Hz signal */
	TIMER.PER = TICKS_PER_50Hz;
 5b2:	80 e4       	ldi	r24, 0x40	; 64
 5b4:	9c e9       	ldi	r25, 0x9C	; 156
 5b6:	86 a3       	lds	r24, 0x56
 5b8:	97 a3       	lds	r25, 0x57
}
 5ba:	08 95       	ret

000005bc <set_throttle>:

void set_throttle(ThrottleOutput output, uint16_t throttle)
{
	if (throttle > THROTTLE_MAX) {
 5bc:	23 e0       	ldi	r18, 0x03	; 3
 5be:	69 3e       	cpi	r22, 0xE9	; 233
 5c0:	72 07       	cpc	r23, r18
 5c2:	20 f5       	brcc	.+72     	; 0x60c <set_throttle+0x50>
		return;
	}
	
	uint16_t val = 2000 + throttle*2;
 5c4:	68 51       	subi	r22, 0x18	; 24
 5c6:	7c 4f       	sbci	r23, 0xFC	; 252
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
	
	switch (output) {
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	91 05       	cpc	r25, r1
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <set_throttle+0x34>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	91 05       	cpc	r25, r1
 5d6:	38 f0       	brcs	.+14     	; 0x5e6 <set_throttle+0x2a>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	91 05       	cpc	r25, r1
 5dc:	71 f0       	breq	.+28     	; 0x5fa <set_throttle+0x3e>
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	91 05       	cpc	r25, r1
 5e2:	a1 f4       	brne	.+40     	; 0x60c <set_throttle+0x50>
 5e4:	0f c0       	rjmp	.+30     	; 0x604 <set_throttle+0x48>
	case A: TIMER.CCA = val; break;
 5e6:	e0 e0       	ldi	r30, 0x00	; 0
 5e8:	f8 e0       	ldi	r31, 0x08	; 8
 5ea:	60 a7       	lds	r22, 0x70
 5ec:	71 a7       	lds	r23, 0x71
 5ee:	08 95       	ret
	case B: TIMER.CCB = val; break;
 5f0:	e0 e0       	ldi	r30, 0x00	; 0
 5f2:	f8 e0       	ldi	r31, 0x08	; 8
 5f4:	62 a7       	lds	r22, 0x72
 5f6:	73 a7       	lds	r23, 0x73
 5f8:	08 95       	ret
	case C: TIMER.CCC = val; break;
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f8 e0       	ldi	r31, 0x08	; 8
 5fe:	64 a7       	lds	r22, 0x74
 600:	75 a7       	lds	r23, 0x75
 602:	08 95       	ret
	case D: TIMER.CCD = val; break;
 604:	e0 e0       	ldi	r30, 0x00	; 0
 606:	f8 e0       	ldi	r31, 0x08	; 8
 608:	66 a7       	lds	r22, 0x76
 60a:	77 a7       	lds	r23, 0x77
 60c:	08 95       	ret

0000060e <poll_button>:
#include "lib/twi_master_driver.h"

bool poll_button()
{
	static uint16_t state = 0;
	state = (state << 1) | (!(PORTF.IN & PIN1_bm)) | 0xE000;
 60e:	e0 ea       	ldi	r30, 0xA0	; 160
 610:	f6 e0       	ldi	r31, 0x06	; 6
 612:	40 85       	ldd	r20, Z+8	; 0x08
 614:	20 91 0c 20 	lds	r18, 0x200C
 618:	30 91 0d 20 	lds	r19, 0x200D
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	30 6e       	ori	r19, 0xE0	; 224
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	41 ff       	sbrs	r20, 1
 628:	02 c0       	rjmp	.+4      	; 0x62e <poll_button+0x20>
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	28 2b       	or	r18, r24
 630:	39 2b       	or	r19, r25
 632:	20 93 0c 20 	sts	0x200C, r18
 636:	30 93 0d 20 	sts	0x200D, r19
#include <util/delay.h>

#include "lib/throttle_driver.h"
#include "lib/twi_master_driver.h"

bool poll_button()
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 ef       	ldi	r25, 0xF0	; 240
 63e:	20 30       	cpi	r18, 0x00	; 0
 640:	39 07       	cpc	r19, r25
 642:	09 f0       	breq	.+2      	; 0x646 <poll_button+0x38>
 644:	80 e0       	ldi	r24, 0x00	; 0
	if (state == 0xF000) {
		return true;
	}
	
	return false;
}
 646:	08 95       	ret

00000648 <main>:

int main(void)
{
	board_init();
 648:	1f de       	rcall	.-962    	; 0x288 <board_init>
 64a:	a4 df       	rcall	.-184    	; 0x594 <enable_throttle>

	enable_throttle();
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0

	set_throttle(A, THROTTLE_MIN);
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	b3 df       	rcall	.-154    	; 0x5bc <set_throttle>
 656:	87 e0       	ldi	r24, 0x07	; 7
 658:	e0 ea       	ldi	r30, 0xA0	; 160
 65a:	f0 e0       	ldi	r31, 0x00	; 0

	bool setting = true;

	irq_initialize_vectors();
 65c:	82 83       	std	Z+2, r24	; 0x02
 65e:	78 94       	sei
 660:	c1 e0       	ldi	r28, 0x01	; 1
 662:	01 e0       	ldi	r16, 0x01	; 1
	sei();
 664:	10 e0       	ldi	r17, 0x00	; 0

	enable_throttle();

	set_throttle(A, THROTTLE_MIN);

	bool setting = true;
 666:	d3 df       	rcall	.-90     	; 0x60e <poll_button>
				set_throttle(A, 50);
			} else {
				set_throttle(A, THROTTLE_MIN);
			}
			
			setting ^= 0x01;
 668:	88 23       	and	r24, r24
 66a:	a1 f0       	breq	.+40     	; 0x694 <main+0x4c>

	irq_initialize_vectors();
	sei();

	while (1) {
		if (poll_button()) {
 66c:	cc 23       	and	r28, r28
 66e:	31 f0       	breq	.+12     	; 0x67c <main+0x34>
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
			if (setting) {
 674:	62 e3       	ldi	r22, 0x32	; 50
 676:	70 e0       	ldi	r23, 0x00	; 0
				set_throttle(A, 50);
 678:	a1 df       	rcall	.-190    	; 0x5bc <set_throttle>
 67a:	05 c0       	rjmp	.+10     	; 0x686 <main+0x3e>
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	9b df       	rcall	.-202    	; 0x5bc <set_throttle>
			} else {
				set_throttle(A, THROTTLE_MIN);
 686:	8c 2f       	mov	r24, r28
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	c1 e0       	ldi	r28, 0x01	; 1
 68c:	80 17       	cp	r24, r16
 68e:	91 07       	cpc	r25, r17
 690:	09 f4       	brne	.+2      	; 0x694 <main+0x4c>
			}
			
			setting ^= 0x01;
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	87 e8       	ldi	r24, 0x87	; 135
 696:	93 e1       	ldi	r25, 0x13	; 19
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <main+0x50>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <main+0x56>
 69e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a0:	e2 cf       	rjmp	.-60     	; 0x666 <main+0x1e>

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
